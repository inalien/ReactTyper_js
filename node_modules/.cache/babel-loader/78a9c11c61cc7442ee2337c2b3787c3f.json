{"ast":null,"code":"var _jsxFileName = \"/Users/inalien/Documents/InalienProjects/typer_js/src/Typer/typerEffect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport \"./typer_style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typer = props => {\n  _s();\n\n  const {\n    loop,\n    speed,\n    delay,\n    words\n  } = props;\n  const [counter, setCounter] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [isDeleting, setIsDeleting] = useState(false); // Typing speed\n\n  const [typingSpeed, setTypingSpeed] = useState(150);\n  const handleTyping = useCallback(() => {\n    // If loop is true, use module to find a word in the list of words\n    // Otherwise keep the same as counter\n    const index = loop ? counter % words.length : counter;\n    const fullWord = words[index];\n\n    if (isDeleting) {\n      setTypingSpeed(speed / 2); // Set to start typing from right to left\n\n      setText(fullWord.substring(0, text.length - 1));\n\n      if (text === \"\") {\n        setIsDeleting(false);\n        setCounter(counter + 1);\n      }\n    } else {\n      setTypingSpeed(speed); // Set to start typing from left to right\n\n      setText(fullWord.substring(0, text.length + 1)); // if all letters have been typed\n\n      if (text === fullWord) {\n        if (!loop && counter >= words.length - 1) {\n          // if there is no loop, exit\n          return;\n        }\n\n        setIsDeleting(true);\n        setTypingSpeed(delay);\n      }\n    }\n  }, [counter, delay, isDeleting, loop, speed, text, words]);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      handleTyping();\n    }, typingSpeed);\n    return () => clearTimeout(timer);\n  }, [handleTyping, typingSpeed]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"blinking-cursor\",\n      children: \"|\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Typer, \"8+vwYFUo3sdfoBGsIjx0NTF5480=\");\n\n_c = Typer;\nexport default Typer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typer\");","map":{"version":3,"sources":["/Users/inalien/Documents/InalienProjects/typer_js/src/Typer/typerEffect.js"],"names":["React","useState","useCallback","useEffect","Typer","props","loop","speed","delay","words","counter","setCounter","text","setText","isDeleting","setIsDeleting","typingSpeed","setTypingSpeed","handleTyping","index","length","fullWord","substring","timer","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAO,mBAAP;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAgCJ,KAAtC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C,CAJuB,CAMvB;;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,GAAD,CAA9C;AAEA,QAAMiB,YAAY,GAAGhB,WAAW,CAAC,MAAM;AACrC;AACA;AAEA,UAAMiB,KAAK,GAAGb,IAAI,GAAGI,OAAO,GAAGD,KAAK,CAACW,MAAnB,GAA4BV,OAA9C;AACA,UAAMW,QAAQ,GAAGZ,KAAK,CAACU,KAAD,CAAtB;;AAEA,QAAIL,UAAJ,EAAgB;AACdG,MAAAA,cAAc,CAACV,KAAK,GAAG,CAAT,CAAd,CADc,CAEb;;AACDM,MAAAA,OAAO,CAACQ,QAAQ,CAACC,SAAT,CAAmB,CAAnB,EAAsBV,IAAI,CAACQ,MAAL,GAAc,CAApC,CAAD,CAAP;;AAEA,UAAIR,IAAI,KAAK,EAAb,EAAiB;AACfG,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAJ,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD;AACF,KATD,MASO;AACLO,MAAAA,cAAc,CAACV,KAAD,CAAd,CADK,CAGL;;AACAM,MAAAA,OAAO,CAACQ,QAAQ,CAACC,SAAT,CAAmB,CAAnB,EAAsBV,IAAI,CAACQ,MAAL,GAAc,CAApC,CAAD,CAAP,CAJK,CAML;;AACA,UAAIR,IAAI,KAAKS,QAAb,EAAuB;AACrB,YAAI,CAACf,IAAD,IAASI,OAAO,IAAID,KAAK,CAACW,MAAN,GAAe,CAAvC,EAA0C;AACxC;AACA;AACD;;AACDL,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,cAAc,CAACT,KAAD,CAAd;AACD;AACF;AACF,GAhC+B,EAgC7B,CAACE,OAAD,EAAUF,KAAV,EAAiBM,UAAjB,EAA6BR,IAA7B,EAAmCC,KAAnC,EAA0CK,IAA1C,EAAgDH,KAAhD,CAhC6B,CAAhC;AAkCAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BN,MAAAA,YAAY;AACb,KAFuB,EAErBF,WAFqB,CAAxB;AAIA,WAAO,MAAMS,YAAY,CAACF,KAAD,CAAzB;AACD,GANQ,EAMN,CAACL,YAAD,EAAeF,WAAf,CANM,CAAT;AAQA,sBACE;AAAA,4BACE;AAAA,gBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAzDD;;GAAMR,K;;KAAAA,K;AA2DN,eAAeA,KAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./typer_style.css\";\n\nconst Typer = (props) => {\n  const { loop, speed, delay, words } = props;\n  const [counter, setCounter] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Typing speed\n  const [typingSpeed, setTypingSpeed] = useState(150);\n\n  const handleTyping = useCallback(() => {\n    // If loop is true, use module to find a word in the list of words\n    // Otherwise keep the same as counter\n\n    const index = loop ? counter % words.length : counter;\n    const fullWord = words[index];\n\n    if (isDeleting) {\n      setTypingSpeed(speed / 2);\n       // Set to start typing from right to left\n      setText(fullWord.substring(0, text.length - 1));\n\n      if (text === \"\") {\n        setIsDeleting(false);\n        setCounter(counter + 1);\n      }\n    } else {\n      setTypingSpeed(speed);\n\n      // Set to start typing from left to right\n      setText(fullWord.substring(0, text.length + 1));\n\n      // if all letters have been typed\n      if (text === fullWord) {\n        if (!loop && counter >= words.length - 1) {\n          // if there is no loop, exit\n          return;\n        }\n        setIsDeleting(true);\n        setTypingSpeed(delay);\n      }\n    }\n  }, [counter, delay, isDeleting, loop, speed, text, words]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      handleTyping();\n    }, typingSpeed);\n\n    return () => clearTimeout(timer);\n  }, [handleTyping, typingSpeed]);\n\n  return (\n    <span>\n      <span>{text}</span>\n      <span className=\"blinking-cursor\">|</span>\n    </span>\n  );\n};\n\nexport default Typer;\n"]},"metadata":{},"sourceType":"module"}